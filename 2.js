console.log("Завдання: 2 ==============================");

// Создаем функцию task2
function task2() {
  // Создаем функцию promise1
  // Возвращаем новый промис
  function promise1() {
      return new Promise((resolve, reject) => {
        // Используем setTimeout для имитации асинхронной операции, которая завершится через 2 секунды.
          setTimeout(() => {resolve("Проміс 1 виконано");
          }, 2000);
      });
  }

  // Створюємо функцію promise2
 function promise2() {
    // Повертаємо новий проміс
    // Використовуємо setTimeout для імітації асинхронної операції, яка завершується через 5 секунди.
    // Після 5 секунд викликаємо resolve з результатом проміса, який є рядком "Проміс 2 виконано"
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve("Проміс 2 виконано");
      }, 5000);
    });
  }
  // Використовуємо Promise.race для визначення, який проміс виконується першим.
  // Метод повертає новий проміс, який вирішується або відхиляється негайно після розв'язання або відхилення будь-якого з промісів у переданому списку.
  // У разі успіху виводимо результат
  // У разі помилки виводимо повідомлення про помилку
  // Незалежно від результату, виводимо повідомлення про завершення обробки промісів, який є рядом "Завдання 2 завершено"
 Promise.race([promise1(), promise2()])
    .then((result) => {
      console.log(result);
    })
    .catch((error) => {
      console.error(error);
    })
    .finally(() => {
      console.log("Завдання 2 виконано");
    });
}

// Викликаємо функцію task2
task2();
